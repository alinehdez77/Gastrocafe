// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SanRafael.Data;
using SanRafael.Models.InsumoModels;
using System;

namespace SanRafael.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SanRafael.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SanRafael.Models.AreaProduccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("AreaProduccion");
                });

            modelBuilder.Entity("SanRafael.Models.Costo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<bool>("Deshabilitado");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<decimal>("Monto");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Periodicidad")
                        .IsRequired();

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Costo");
                });

            modelBuilder.Entity("SanRafael.Models.InsumoModels.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("SanRafael.Models.InsumoModels.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<int>("CategoriaId");

                    b.Property<bool>("Deshabilitado");

                    b.Property<DateTime>("FechaDeRegistro");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<float>("Precio");

                    b.Property<string>("RutaImagen");

                    b.Property<int>("StockMinimo");

                    b.Property<string>("Tienda")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("UnidadId");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UnidadId");

                    b.ToTable("Insumo");
                });

            modelBuilder.Entity("SanRafael.Models.InsumoModels.InsumoPrecioHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("InsumoId");

                    b.Property<float>("Precio");

                    b.HasKey("Id");

                    b.HasIndex("InsumoId");

                    b.ToTable("InsumoPrecioHistorial");
                });

            modelBuilder.Entity("SanRafael.Models.InsumoModels.Unidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Grupo");

                    b.Property<int>("Nombre");

                    b.Property<string>("Simbolo");

                    b.Property<int>("UnidadBase");

                    b.HasKey("Id");

                    b.ToTable("Unidad");
                });

            modelBuilder.Entity("SanRafael.Models.InsumosMarcas", b =>
                {
                    b.Property<int>("InsumoId");

                    b.Property<int>("MarcaId");

                    b.HasKey("InsumoId", "MarcaId");

                    b.HasIndex("MarcaId");

                    b.ToTable("InsumosMarcas");
                });

            modelBuilder.Entity("SanRafael.Models.InsumosPresentaciones", b =>
                {
                    b.Property<int>("InsumoId");

                    b.Property<int>("PresentacionId");

                    b.HasKey("InsumoId", "PresentacionId");

                    b.HasIndex("InsumoId")
                        .IsUnique();

                    b.HasIndex("PresentacionId");

                    b.ToTable("InsumosPresentaciones");
                });

            modelBuilder.Entity("SanRafael.Models.InsumosRecetas", b =>
                {
                    b.Property<int>("IdInsumo");

                    b.Property<int>("IdReceta");

                    b.Property<int>("IdUnidad");

                    b.Property<double>("PesoNeto");

                    b.Property<int?>("UnidadId");

                    b.HasKey("IdInsumo", "IdReceta", "IdUnidad");

                    b.HasIndex("IdReceta");

                    b.HasIndex("UnidadId");

                    b.ToTable("InsumosRecetas");
                });

            modelBuilder.Entity("SanRafael.Models.Marca", b =>
                {
                    b.Property<int>("MarcaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("MarcaId");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("SanRafael.Models.Presentacion", b =>
                {
                    b.Property<int>("idPresentacion")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UnidadId");

                    b.Property<int>("cantidadUnidades");

                    b.Property<bool>("fechaCaducidad");

                    b.Property<string>("nombre")
                        .IsRequired();

                    b.Property<double>("precioPresentacion");

                    b.Property<double>("precioUnitario");

                    b.HasKey("idPresentacion");

                    b.HasIndex("UnidadId");

                    b.ToTable("Presentacion");
                });

            modelBuilder.Entity("SanRafael.Models.Receta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<int>("AreaProduccionId");

                    b.Property<string>("Clasificacion");

                    b.Property<decimal>("CostoOperacion");

                    b.Property<decimal>("CostoOtrosConUtilidad");

                    b.Property<decimal>("CostoUnitario");

                    b.Property<decimal>("IngresoProducto");

                    b.Property<string>("MetodoPreparacion");

                    b.Property<string>("Nombre");

                    b.Property<int>("Porciones");

                    b.Property<decimal>("PrecioDefinidoPorUsuario");

                    b.Property<decimal>("PrecioSugerido");

                    b.Property<decimal>("PrecioVentaConIva");

                    b.Property<int>("RecetasVendidas");

                    b.Property<string>("TipoReceta");

                    b.HasKey("Id");

                    b.HasIndex("AreaProduccionId");

                    b.ToTable("Receta");
                });

            modelBuilder.Entity("SanRafael.Models.RecetaAReceta", b =>
                {
                    b.Property<int?>("IdRecetaHijo");

                    b.Property<int?>("IdRecetaPadre");

                    b.Property<int>("Porciones");

                    b.HasKey("IdRecetaHijo", "IdRecetaPadre");

                    b.HasIndex("IdRecetaPadre");

                    b.ToTable("RecetaAReceta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SanRafael.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SanRafael.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SanRafael.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SanRafael.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SanRafael.Models.InsumoModels.Insumo", b =>
                {
                    b.HasOne("SanRafael.Models.InsumoModels.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SanRafael.Models.InsumoModels.Unidad", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SanRafael.Models.InsumoModels.InsumoPrecioHistorial", b =>
                {
                    b.HasOne("SanRafael.Models.InsumoModels.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SanRafael.Models.InsumosMarcas", b =>
                {
                    b.HasOne("SanRafael.Models.InsumoModels.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SanRafael.Models.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SanRafael.Models.InsumosPresentaciones", b =>
                {
                    b.HasOne("SanRafael.Models.InsumoModels.Insumo", "Insumo")
                        .WithOne()
                        .HasForeignKey("SanRafael.Models.InsumosPresentaciones", "InsumoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SanRafael.Models.Presentacion", "Presentacion")
                        .WithMany()
                        .HasForeignKey("PresentacionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SanRafael.Models.InsumosRecetas", b =>
                {
                    b.HasOne("SanRafael.Models.InsumoModels.Insumo", "Insumo")
                        .WithMany("Recetas")
                        .HasForeignKey("IdInsumo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SanRafael.Models.Receta", "Receta")
                        .WithMany("InsumosReceta")
                        .HasForeignKey("IdReceta")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SanRafael.Models.InsumoModels.Unidad", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId");
                });

            modelBuilder.Entity("SanRafael.Models.Presentacion", b =>
                {
                    b.HasOne("SanRafael.Models.InsumoModels.Unidad", "unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SanRafael.Models.Receta", b =>
                {
                    b.HasOne("SanRafael.Models.AreaProduccion", "AreaProduccion")
                        .WithMany()
                        .HasForeignKey("AreaProduccionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SanRafael.Models.RecetaAReceta", b =>
                {
                    b.HasOne("SanRafael.Models.Receta", "RecetaHijo")
                        .WithMany("RecetasPadres")
                        .HasForeignKey("IdRecetaHijo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SanRafael.Models.Receta", "RecetaPadre")
                        .WithMany("RecetasIntegradoras")
                        .HasForeignKey("IdRecetaPadre")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
